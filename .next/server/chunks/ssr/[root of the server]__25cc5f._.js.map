{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/providers.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Providers = registerClientReference(\n    function() { throw new Error(\"Attempted to call Providers() from the server but Providers is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/providers.tsx\",\n    \"Providers\",\n);\n"],"names":[],"mappings":";;;;;;AACO,MAAM,YAAY,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,+BACA"}},
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/config/site.ts"],"sourcesContent":["export type SiteConfig = typeof siteConfig;\nexport const siteConfig = {\n  name: \"APL PS\",\n  description: \"My Portfolio\",\n  // navMenuItems: [\n  //   {\n  //     label: \"Home\",\n  //     href: \"/\",\n  //   },\n  //   {\n  //     label: \"Authentication\",\n  //     href: \"/authentication\",\n  //   }\n  // ],\n  links: {\n    github: \"https://github.com/phonsing-Hub\",\n  },\n};\n"],"names":[],"mappings":";;;AACO,MAAM,aAAa;IACxB,MAAM;IACN,aAAa;IACb,kBAAkB;IAClB,MAAM;IACN,qBAAqB;IACrB,iBAAiB;IACjB,OAAO;IACP,MAAM;IACN,+BAA+B;IAC/B,+BAA+B;IAC/B,MAAM;IACN,KAAK;IACL,OAAO;QACL,QAAQ;IACV;AACF"}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["/turbopack/[next]/internal/font/google/inter_b35c0a41.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"className\": \"inter_b35c0a41-module__Y0D1la__className\",\n  \"variable\": \"inter_b35c0a41-module__Y0D1la__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":["/turbopack/[next]/internal/font/google/inter_b35c0a41.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22fonts.ts%22,%22import%22:%22Inter%22,%22arguments%22:[{%22subsets%22:[%22latin%22],%22variable%22:%22--font-sans%22}],%22variableName%22:%22fontSans%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'__Inter_b35c0a', '__Inter_Fallback_b35c0a'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;;;;AACA,MAAM,WAAW;IACb,WAAW,qJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,qJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,qJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe"}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["/turbopack/[next]/internal/font/google/fira_code_b79a8a20.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"className\": \"fira_code_b79a8a20-module__-fm2dq__className\",\n  \"variable\": \"fira_code_b79a8a20-module__-fm2dq__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["/turbopack/[next]/internal/font/google/fira_code_b79a8a20.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22fonts.ts%22,%22import%22:%22Fira_Code%22,%22arguments%22:[{%22subsets%22:[%22latin%22],%22variable%22:%22--font-mono%22}],%22variableName%22:%22fontMono%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'__Fira_Code_b79a8a', '__Fira_Code_Fallback_b79a8a'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;;;;AACA,MAAM,WAAW;IACb,WAAW,yJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,yJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,yJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe"}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/navbar.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Navbar = registerClientReference(\n    function() { throw new Error(\"Attempted to call Navbar() from the server but Navbar is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/navbar.tsx\",\n    \"Navbar\",\n);\n"],"names":[],"mappings":";;;;;;AACO,MAAM,SAAS,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACxC;IAAa,MAAM,IAAI,MAAM;AAA4N,GACzP,mCACA"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/layout.tsx"],"sourcesContent":["import \"@/styles/globals.css\";\nimport clsx from \"clsx\";\nimport { Analytics } from \"@vercel/analytics/react\";\nimport { Metadata, Viewport } from \"next\";\nimport { Providers } from \"./providers\";\nimport { siteConfig } from \"@/config/site\";\nimport { fontSans } from \"@/config/fonts\";\nimport { Navbar } from \"@/components/navbar\";\nimport { SpeedInsights } from \"@vercel/speed-insights/next\";\nexport const metadata: Metadata = {\n  title: {\n    default: siteConfig.name,\n    template: `%s - ${siteConfig.name}`,\n  },\n  description: siteConfig.description,\n  icons: {\n    icon: \"/favicon.png\",\n  },\n};\n\nexport const viewport: Viewport = {\n  themeColor: [\n    { media: \"(prefers-color-scheme: light)\", color: \"white\" },\n    { media: \"(prefers-color-scheme: dark)\", color: \"black\" },\n  ],\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html suppressHydrationWarning lang=\"en\">\n      <head />\n      <body\n        className={clsx(\n          \"min-h-screen bg-background font-sans antialiased\",\n          fontSans.variable\n        )}\n      >\n        <Analytics />\n        <Providers themeProps={{ attribute: \"class\", defaultTheme: \"dark\" }}>\n          <div className=\"relative flex flex-col h-screen\">\n            <Navbar />\n            <main className=\"container mx-auto max-w-7xl pt-16 px-1\">\n              {children}\n            </main>\n            <footer className=\"w-full flex items-center justify-center py-3\">\n              <span className=\"text-default-600 font-bold text-xs\">@2002</span>\n              <p className=\"text-primary font-bold text-xs ml-1\">APL PS</p>\n            </footer>\n          </div>\n        </Providers>\n        <SpeedInsights />\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AASO,MAAM,WAAqB;IAChC,OAAO;QACL,SAAS,8GAAA,CAAA,aAAU,CAAC,IAAI;QACxB,UAAU,CAAC,KAAK,EAAE,8GAAA,CAAA,aAAU,CAAC,IAAI,CAAC,CAAC;IACrC;IACA,aAAa,8GAAA,CAAA,aAAU,CAAC,WAAW;IACnC,OAAO;QACL,MAAM;IACR;AACF;AAEO,MAAM,WAAqB;IAChC,YAAY;QACV;YAAE,OAAO;YAAiC,OAAO;QAAQ;QACzD;YAAE,OAAO;YAAgC,OAAO;QAAQ;KACzD;AACH;AAEe,SAAS,WAAW,EACjC,QAAQ,EAGT;IACC,qBACE,wPAAC;QAAK,wBAAwB;QAAC,MAAK;;0BAClC,wPAAC;;;;;0BACD,wPAAC;gBACC,WAAW,CAAA,GAAA,qIAAA,CAAA,UAAI,AAAD,EACZ,oDACA,gLAAA,CAAA,WAAQ,CAAC,QAAQ;;kCAGnB,wPAAC,gKAAA,CAAA,YAAS;;;;;kCACV,wPAAC,iHAAA,CAAA,YAAS;wBAAC,YAAY;4BAAE,WAAW;4BAAS,cAAc;wBAAO;kCAChE,cAAA,wPAAC;4BAAI,WAAU;;8CACb,wPAAC,qHAAA,CAAA,SAAM;;;;;8CACP,wPAAC;oCAAK,WAAU;8CACb;;;;;;8CAEH,wPAAC;oCAAO,WAAU;;sDAChB,wPAAC;4CAAK,WAAU;sDAAqC;;;;;;sDACrD,wPAAC;4CAAE,WAAU;sDAAsC;;;;;;;;;;;;;;;;;;;;;;;kCAIzD,wPAAC,uKAAA,CAAA,gBAAa;;;;;;;;;;;;;;;;;AAItB"}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/error.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/error.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/error.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;;;;uCACe,CAAA,GAAA,+PAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6P,GAC1R,2BACA"}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 338, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/authentication/layout.tsx"],"sourcesContent":["export default function AboutLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return <section >{children}</section>;\n}\n"],"names":[],"mappings":";;;;;;AAAe,SAAS,YAAY,EAClC,QAAQ,EAGT;IACC,qBAAO,wPAAC;kBAAU;;;;;;AACpB"}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 377, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/authentication/data.ts"],"sourcesContent":["const details = {\n  title:\n    \"การ Authentication (ออเทนทิเคชั่น) หรือการยืนยันตัวตน คือ กระบวนการตรวจสอบและยืนยันว่า ผู้ใช้หรือระบบที่กำลังพยายามเข้าถึงข้อมูลหรือบริการต่าง ๆ เป็นใคร โดยใช้ข้อมูลที่ใช้ยืนยัน เช่น ชื่อผู้ใช้และรหัสผ่าน, การส่งรหัส OTP ทางข้อความ, หรือการสแกนลายนิ้วมือ การทำเช่นนี้มีจุดประสงค์เพื่อให้แน่ใจว่าผู้ใช้มีสิทธิ์ในการเข้าถึงข้อมูลหรือบริการนั้น ๆ โดยป้องกันไม่ให้บุคคลที่ไม่มีสิทธิ์เข้ามาใช้งาน\",\n};\n\nconst code = {\n  main: `package main\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/gofiber/fiber/v2/middleware/cors\"\n\t\"github.com/gofiber/fiber/v2/middleware/logger\"\n\t\"github.com/joho/godotenv\"\n\t\"github.com/phonsing-Hub/EmployeeSystem/src/db\"\n\t\"github.com/phonsing-Hub/EmployeeSystem/src/middleware\"\n\t\"github.com/phonsing-Hub/EmployeeSystem/src/routing/auth\"\n\t\"github.com/phonsing-Hub/EmployeeSystem/src/routing/emp\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc main() {\n\terr := godotenv.Load()\n\tif err != nil {\n\t\tpanic(\"Error loading .env file\")\n\t}\n\tapi := os.Getenv(\"API_VERSION\")\n\tdbuser := os.Getenv(\"DB_USER\")\n\tdbpass := os.Getenv(\"DB_PASS\")\n\tdbhost := os.Getenv(\"DB_HOST\")\n\tdbname := os.Getenv(\"DB_NAME\")\n\n\tdb, err := db.New(dbuser, dbpass, dbhost, dbname)\n\tif err != nil {\n\t\tpanic(\"failed to connect to database\")\n\t}\n\tapp := fiber.New()\n\tapp.Use(cors.New(cors.Config{\n\t\tAllowOrigins:     \"http://localhost:5173\",                       \n\t\tAllowMethods:     \"GET, POST, PUT, DELETE, OPTIONS\",             \n\t\tAllowHeaders:     \"Origin, Content-Type, Accept, Authorization\", \n\t\tAllowCredentials: true,                                          \n\t\tMaxAge:           int(24 * time.Hour / time.Second),             \n\t}))\n\n\tapp.Use(logger.New())\n\t//localhost/v1/auth\n\tauth_v1 := app.Group(api + \"/auth\")\n\tauth.SetAuthentication(auth_v1, db.DB)\n\temp_v1 := app.Group(api+\"/employees\", middleware.Token)\n\temp.EmployeesRouting(emp_v1, db.DB)\n\tapp.Listen(\":3000\")\n}\n  `,\n  db: `package db\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"time\"\n\t\"github.com/phonsing-Hub/EmployeeSystem/src/models\"\n\t\"gorm.io/driver/mysql\"\n\t\"gorm.io/gorm\"\n\t\"gorm.io/gorm/logger\"\n\t\"log\"\n)\n\ntype Db struct {\n\tDB *gorm.DB\n}\n\nfunc New(dbuser string, dbpass string, dbhost string, dbname string) (*Db, error) {\n\tdsn := fmt.Sprintf(\"%s:%s@tcp(%s)/%s?charset=utf8mb4&parseTime=True&loc=Local\",\n\t\tdbuser, dbpass, dbhost, dbname)\n\tdb, err := gorm.Open(mysql.Open(dsn), &gorm.Config{Logger: loggerConfig(true)})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\terr = db.AutoMigrate(\n\t\t&models.Region{},\n\t\t&models.Country{},\n\t\t&models.Location{},\n\t\t&models.Job{},\n\t\t&models.Department{},\n\t\t&models.Employee{},\n\t\t&models.Dependent{},\n\t\t&models.AuthUser{},\n\t\t&models.Token{},\n\t\t&models.Image{},\n\t)\n\n\tif err != nil {\n\t\tlog.Fatalf(\"ไม่สามารถ migrate ตารางได้: %v\", err)\n\t}\n\treturn &Db{DB: db}, nil\n}\n\nfunc loggerConfig(enable bool) logger.Interface {\n\tif enable {\n\t\tnewLogger := logger.New(\n\t\t\tlog.New(os.Stdout, \"\\r\\n\", log.LstdFlags), // io writer\n\t\t\tlogger.Config{\n\t\t\t\tSlowThreshold:             time.Second, // Slow SQL threshold\n\t\t\t\tLogLevel:                  logger.Info, // Set log level\n\t\t\t\tIgnoreRecordNotFoundError: true,        // Ignore ErrRecordNotFound errors\n\t\t\t\tParameterizedQueries:      true,        // Don't include raw SQL queries in logs\n\t\t\t\tColorful:                  true,        // Colorize logs\n\t\t\t},\n\t\t)\n\t\treturn newLogger\n\t}\n\n\t// Default silent logger if not enabled\n\treturn logger.Default.LogMode(logger.Silent)\n}\n`,\n  md: `package middleware\nimport(\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/phonsing-Hub/EmployeeSystem/src/utils\"\n\n)\n\nfunc Token(c *fiber.Ctx) error {\n\t_, err := utils.VerifyToken(c.Cookies(\"emp_auth\"));\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusUnauthorized).SendString(\"Unauthorized\");\n\t}\n\treturn c.Next();\n}\n`,\n  models: `package models\n\nimport \"time\"\n\ntype Region struct {\n\tID         int       \\`gorm:\"column:region_id;primaryKey;autoIncrement\" json:\"region_id\"\\`\n\tRegionName string    \\`gorm:\"column:region_name\" json:\"region_name\"\\`\n\tCountries  []Country \\`gorm:\"foreignKey:RegionID\" json:\"countries\"\\`\n}\n\ntype Country struct {\n\tID          string     \\`gorm:\"column:country_id;primaryKey;size:2\" json:\"country_id\"\\`\n\tCountryName string     \\`gorm:\"column:country_name\" json:\"country_name\"\\`\n\tRegionID    int        \\`gorm:\"column:region_id\" json:\"region_id\"\\`\n\tRegion      Region     \\`gorm:\"foreignKey:RegionID\" json:\"region\"\\`\n\tLocations   []Location \\`gorm:\"foreignKey:CountryID\" json:\"locations\"\\`\n}\n\ntype Location struct {\n\tID            int          \\`gorm:\"column:location_id;primaryKey;autoIncrement\" json:\"location_id\"\\`\n\tStreetAddress string       \\`gorm:\"column:street_address\" json:\"street_address\"\\`\n\tPostalCode    string       \\`gorm:\"column:postal_code\" json:\"postal_code\"\\`\n\tCity          string       \\`gorm:\"column:city;not null\" json:\"city\"\\`\n\tStateProvince string       \\`gorm:\"column:state_province\" json:\"state_province\"\\`\n\tCountryID     string       \\`gorm:\"column:country_id;size:2;not null\" json:\"country_id\"\\`\n\tCountry       Country      \\`gorm:\"foreignKey:CountryID\" json:\"country\"\\`\n\tDepartments   []Department \\`gorm:\"foreignKey:LocationID\" json:\"departments\"\\`\n}\n\ntype Job struct {\n\tID        int        \\`gorm:\"column:job_id;primaryKey;autoIncrement\" json:\"job_id\"\\`\n\tJobTitle  string     \\`gorm:\"column:job_title;not null\" json:\"job_title\"\\`\n\tMinSalary float64    \\`gorm:\"column:min_salary\" json:\"min_salary\"\\`\n\tMaxSalary float64    \\`gorm:\"column:max_salary\" json:\"max_salary\"\\`\n\tEmployees []Employee \\`gorm:\"foreignKey:JobID\" json:\"employees\"\\`\n}\n\ntype Department struct {\n\tID             int        \\`gorm:\"column:department_id;primaryKey;autoIncrement\" json:\"department_id\"\\`\n\tDepartmentName string     \\`gorm:\"column:department_name;not null\" json:\"department_name\"\\`\n\tLocationID     int        \\`gorm:\"column:location_id\" json:\"location_id\"\\`\n\tLocation       Location   \\`gorm:\"foreignKey:LocationID\" json:\"location\"\\`\n\tEmployees      []Employee \\`gorm:\"foreignKey:DepartmentID\" json:\"employees\"\\`\n}\n\ntype Employee struct {\n\tID           int         \\`gorm:\"column:employee_id;primaryKey;autoIncrement\" json:\"employee_id\"\\`\n\tFirstName    string      \\`gorm:\"column:first_name\" json:\"first_name\"\\`\n\tLastName     string      \\`gorm:\"column:last_name;not null\" json:\"last_name\"\\`\n\tEmail        string      \\`gorm:\"column:email;not null\" json:\"email\"\\`\n\tPhoneNumber  string      \\`gorm:\"column:phone_number\" json:\"phone_number\"\\`\n\tHireDate     time.Time   \\`gorm:\"column:hire_date;not null\" json:\"hire_date\"\\`\n\tJobID        int         \\`gorm:\"column:job_id;not null\" json:\"job_id\"\\`\n\tJob          Job         \\`gorm:\"foreignKey:JobID\" json:\"job\"\\`\n\tSalary       float64     \\`gorm:\"column:salary;not null\" json:\"salary\"\\`\n\tManagerID    *int        \\`gorm:\"column:manager_id\" json:\"manager_id\"\\`\n\tManager      *Employee   \\`gorm:\"foreignKey:ManagerID\" json:\"manager\"\\`\n\tDepartmentID *int        \\`gorm:\"column:department_id\" json:\"department_id\"\\`\n\tDepartment   *Department \\`gorm:\"foreignKey:DepartmentID\" json:\"department\"\\`\n\tSubordinates []Employee  \\`gorm:\"foreignKey:ManagerID\" json:\"subordinates\"\\`\n\tDependents   []Dependent \\`gorm:\"foreignKey:EmployeeID\" json:\"dependents\"\\`\n}\n\ntype Dependent struct {\n\tID           int      \\`gorm:\"column:dependent_id;primaryKey;autoIncrement\" json:\"dependent_id\"\\`\n\tFirstName    string   \\`gorm:\"column:first_name;not null\" json:\"first_name\"\\`\n\tLastName     string   \\`gorm:\"column:last_name;not null\" json:\"last_name\"\\`\n\tRelationship string   \\`gorm:\"column:relationship;not null\" json:\"relationship\"\\`\n\tEmployeeID   int      \\`gorm:\"column:employee_id;not null\" json:\"employee_id\"\\`\n\tEmployee     Employee \\`gorm:\"foreignKey:EmployeeID\" json:\"employee\"\\`\n}\n\n// AuthUser model for authentication\ntype AuthUser struct {\n\tEmployeeID       int        \\`gorm:\"primaryKey;\" json:\"employee_id\"\\`\n\tEmail            string     \\`gorm:\"type:varchar(100);unique;not null\"\\`\n\tPassword         string     \\`gorm:\"type:varchar(255);not null\"\\` // Password should be hashed\n\tLastLogin        *time.Time // Track the last login time\n\tRole             string     \\`gorm:\"type:varchar(20);default:admin\"\\` // Default role is admin\n\tResetToken       string     \\`gorm:\"type:varchar(255)\"\\`              // For password reset functionality\n\tResetTokenExpiry *time.Time // For tracking token expiration\n\tEmployee         Employee   \\`gorm:\"foreignKey:EmployeeID;constraint:OnUpdate:CASCADE,OnDelete:CASCADE\" json:\"employee\"\\`\n}\n\n// Token model for managing JWT tokens\ntype Token struct {\n\tUserID    int       \\`gorm:\"not null\"\\`\n\tToken     string    \\`gorm:\"type:text;not null\"\\`\n\tExpiresAt time.Time \\`gorm:\"not null\"\\`\n\tUser      AuthUser  \\`gorm:\"foreignKey:UserID;constraint:OnUpdate:CASCADE,OnDelete:CASCADE\"\\`\n}\n\ntype Image struct {\n\tID         int      \\`gorm:\"column:id;primaryKey;autoIncrement\" json:\"id\"\\`\n\tEmployeeID int      \\`gorm:\"column:employee_id;not null\" json:\"employee_id\"\\`\n\tFileName   string   \\`gorm:\"column:file_name;size:100\" json:\"file_name\"\\`\n\tFileType   string   \\`gorm:\"column:file_type;size:100\" json:\"file_type\"\\`\n\tFileData   []byte   \\`gorm:\"column:file_data;type:LONGBLOB\" json:\"file_data\"\\`\n\tEmployee   Employee \\`gorm:\"foreignKey:EmployeeID;constraint:OnUpdate:CASCADE,OnDelete:Cascade\" json:\"employee\"\\`\n}\n`,\n  auth: `package auth\n\nimport (\n\t\"errors\"\n\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/phonsing-Hub/EmployeeSystem/src/models\"\n\t\"github.com/phonsing-Hub/EmployeeSystem/src/utils\"\n\t\"gorm.io/gorm\"\n\t\"time\"\n)\n\nfunc SetAuthentication(app fiber.Router, db *gorm.DB) {\n\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n\t\treturn auth(c, db)\n\t})\n\tapp.Post(\"/register\", func(c *fiber.Ctx) error {\n\t\treturn register(c, db)\n\t})\n\tapp.Post(\"/login\", func(c *fiber.Ctx) error {\n\t\treturn login(c, db)\n\t})\n}\n\ntype Employees struct {\n\tID       uint   \\`json:\"id\"\\`\n\tEmail    string \\`json:\"email\"\\`\n\tPassword string \\`json:\"pass\"\\`\n\tRole     string \\`json:\"role\"\\`\n}\n\nfunc auth(c *fiber.Ctx, db *gorm.DB) error {\n\tvar user struct {\n\t\tID         uint    \\`json:\"id\"\\`\n\t\tName       string  \\`json:\"firstname\"\\`\n\t\tLastname   string  \\`json:\"lastname\"\\`\n\t\tEmail      string  \\`json:\"email\"\\`\n\t\tPhone      string  \\`json:\"phone\"\\`\n\t\tDepartment string  \\`json:\"departmentname\"\\`\n\t\tJobTitle   string  \\`json:\"positions\"\\`\n\t\tSalary     float64 \\`json:\"salary\"\\`\n\t}\n\ttoken := c.Cookies(\"emp_auth\")\n\tif token == \"\" {\n\t\treturn c.Status(fiber.StatusUnauthorized).SendString(\"Unauthorized\")\n\t}\n\tdeta, err := utils.VerifyToken(c.Cookies(\"emp_auth\"))\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusUnauthorized).SendString(\"Unauthorized\")\n\t}\n\tid, ok := deta[\"id\"]\n\tif !ok {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(\"Failed to retrieve id\")\n\t}\n\n\tquery := \\`\n\tSELECT\n\t    e.employee_id AS id,\n\t    e.first_name AS name,\n\t    e.last_name AS lastname,\n\t    e.email,\n\t    e.phone_number AS phone,\n\t    d.department_name AS department,\n\t    j.job_title AS job_title,\n\t    e.salary\n\tFROM\n\t    employees e\n\tLEFT JOIN\n\t    departments d ON e.department_id = d.department_id\n\tLEFT JOIN\n\t    jobs j ON e.job_id = j.job_id\n\tWHERE e.employee_id = ?;\\`\n\n\tif err := db.Raw(query, id).Scan(&user).Error; err != nil {\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Could not fetch employee\"})\n\t}\n\n\tif user.ID == 0 {\n\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Employee not found\"})\n\t}\n\n\treturn c.Status(200).JSON(user)\n}\n\nfunc register(c *fiber.Ctx, db *gorm.DB) error {\n\te := new(Employees)\n\tif err := c.BodyParser(e); err != nil {\n\t\treturn c.Status(fiber.StatusBadRequest).SendString(err.Error())\n\t}\n\n\thash, _ := utils.HashPassword(e.Password)\n\tdata := models.AuthUser{\n\t\tEmployeeID: int(e.ID),\n\t\tEmail:      e.Email,\n\t\tPassword:   hash,\n\t\tRole:       e.Role,\n\t}\n\tresult := db.Create(&data)\n\tif result.Error != nil {\n\t\treturn c.Status(fiber.StatusConflict).SendString(\"create user unsuccessful: \" + result.Error.Error())\n\t}\n\n\treturn c.Status(fiber.StatusCreated).SendString(\"create user successful!\")\n}\n\nfunc login(c *fiber.Ctx, db *gorm.DB) error {\n\te := new(Employees)\n\tif err := c.BodyParser(e); err != nil {\n\t\treturn c.Status(fiber.StatusBadRequest).SendString(err.Error())\n\t}\n\tvar user models.AuthUser\n\t//   SELECT id, email, password, role FROM mydb.auth_users WHERE email = ?\n\tif err := db.Select(\"employee_id, email, password, role\").Where(\"email = ?\", e.Email).First(&user).Error; err != nil {\n\t\tif errors.Is(err, gorm.ErrRecordNotFound) {\n\t\t\treturn c.Status(fiber.StatusNotFound).SendString(\"user not found\")\n\t\t}\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(\"error retrieving user\")\n\t}\n\n\tif !utils.CheckPasswordHash(e.Password, user.Password) {\n\t\treturn c.Status(fiber.StatusUnauthorized).SendString(\"invalid password\")\n\t}\n\n\t//set Tonken\n\ttoken, err := utils.CreateToken(uint(user.EmployeeID), user.Email, user.Role)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusConflict).SendString(\"create user unsuccessful: \" + err.Error())\n\t}\n\tnow := time.Now()\n\tuser.LastLogin = &now\n\t//UPDATE auth_users SET last_login = <time.Now> WHERE id = <user.ID>;\n\tif err := db.Model(&user).Update(\"last_login\", user.LastLogin).Error; err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(\"error updating last login time: \" + err.Error())\n\t}\n\n\tvar existingToken models.Token\n\terr = db.Where(\"user_id = ?\", user.EmployeeID).First(&existingToken).Error\n\tif err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(\"error checking for existing token: \" + err.Error())\n\t}\n\n\tif errors.Is(err, gorm.ErrRecordNotFound) {\n\t\t//INSERT INTO mydb.tokens (user_id, token, expires_at) VALUES(?, ?, ?);\n\t\ttokenModel := models.Token{\n\t\t\tUserID:    user.EmployeeID,\n\t\t\tToken:     token,\n\t\t\tExpiresAt: time.Now().Add(24 * time.Hour),\n\t\t}\n\t\tif err := db.Create(&tokenModel).Error; err != nil {\n\t\t\treturn c.Status(fiber.StatusInternalServerError).SendString(\"error creating token: \" + err.Error())\n\t\t}\n\t} else {\n\t\t// UPDATE tokens SET token = <newTokenValue>, expires_at = <newExpiryTime>, updated_at = <currentTime> WHERE id = existingTokenID;\n\t\tif err := db.Model(&existingToken).\n\t\t\tWhere(\"user_id = ?\", user.EmployeeID).\n\t\t\tUpdates(models.Token{Token: token, ExpiresAt: time.Now().Add(24 * time.Hour)}).Error; err != nil {\n\t\t\treturn c.Status(fiber.StatusInternalServerError).SendString(\"error updating token: \" + err.Error())\n\t\t}\n\t}\n\t// set database : CREATE EVENT delete_expired_tokens ON SCHEDULE EVERY 1 HOUR DO DELETE FROM tokens WHERE expires_at < NOW();\n\n\tc.Cookie(&fiber.Cookie{\n\t\tName:     \"emp_auth\",\n\t\tValue:    token,\n\t\tExpires:  time.Now().Add(time.Hour * 24),\n\t\tHTTPOnly: true,\n\t\tSecure:   true,\n\t\tSameSite: \"Strict\",\n\t})\n\n\treturn c.Status(fiber.StatusOK).SendString(\"login successful!\")\n}\n`,\n  emp: `package emp\n\nimport (\n\t\"github.com/gofiber/fiber/v2\"\n\t\"github.com/phonsing-Hub/EmployeeSystem/src/models\"\n\t\"github.com/phonsing-Hub/EmployeeSystem/src/utils\"\n\t\"gorm.io/gorm\"\n\t\"io\"\n\t//\"time\"\n)\n\nfunc EmployeesRouting(app fiber.Router, db *gorm.DB) {\n\tapp.Get(\"/\", func(c *fiber.Ctx) error {\n\t\treturn getAllEmployeeDetails(c, db)\n\t})\n\tapp.Get(\"/:id\", func(c *fiber.Ctx) error {\n\t\treturn getAllEmployeeById(c, db)\n\t})\n\tapp.Post(\"/new\", func(c *fiber.Ctx) error {\n\t\treturn upLoadImage(c, db)\n\t})\n\n\tapp.Get(\"image/:id\", func(c *fiber.Ctx) error {\n\t\treturn getImage(c, db)\n\t})\n\n}\n\nfunc getAllEmployeeDetails(c *fiber.Ctx, db *gorm.DB) error {\n\tvar employeeDetails []struct {\n\t\tID         uint    \\`json:\"id\"\\`\n\t\tName       string  \\`json:\"firstname\"\\`\n\t\tLastname   string  \\`json:\"lastname\"\\`\n\t\tEmail      string  \\`json:\"email\"\\`\n\t\tPhone      string  \\`json:\"phone\"\\`\n\t\tDepartment string  \\`json:\"department\"\\`\n\t\tJobTitle   string  \\`json:\"positions\"\\`\n\t\tHiredate   string  \\`json:\"hiredate\"\\`\n\t\tSalary     float64 \\`json:\"salary\"\\`\n\t}\n\n\tquery := \\`\n\tSELECT\n\t    e.employee_id AS id,\n\t    e.first_name AS name,\n\t    e.last_name AS lastname,\n\t    e.email,\n\t    e.phone_number AS phone,\n\t    d.department_name AS department,\n\t    j.job_title AS job_title,\n\t\te.hire_date AS hiredate,\n\t    e.salary\n\tFROM\n\t    employees e\n\tLEFT JOIN\n\t    departments d ON e.department_id = d.department_id\n\tLEFT JOIN\n\t    jobs j ON e.job_id = j.job_id;\\`\n\n\tif err := db.Raw(query).Scan(&employeeDetails).Error; err != nil {\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Could not fetch employee details\"})\n\t}\n\n\treturn c.Status(200).JSON(employeeDetails)\n}\n\nfunc getAllEmployeeById(c *fiber.Ctx, db *gorm.DB) error {\n\tid := c.Params(\"id\")\n\tvar employeeById struct {\n\t\tID         uint    \\`json:\"id\"\\`\n\t\tName       string  \\`json:\"firstname\"\\`\n\t\tLastname   string  \\`json:\"lastname\"\\`\n\t\tEmail      string  \\`json:\"email\"\\`\n\t\tPhone      string  \\`json:\"phone\"\\`\n\t\tDepartment string  \\`json:\"departmentname\"\\`\n\t\tJobTitle   string  \\`json:\"positions\"\\`\n\t\tSalary     float64 \\`json:\"salary\"\\`\n\t}\n\n\tquery := \\`\n\tSELECT\n\t    e.employee_id AS id,\n\t    e.first_name AS name,\n\t    e.last_name AS lastname,\n\t    e.email,\n\t    e.phone_number AS phone,\n\t    d.department_name AS department,\n\t    j.job_title AS job_title,\n\t    e.salary\n\tFROM\n\t    employees e\n\tLEFT JOIN\n\t    departments d ON e.department_id = d.department_id\n\tLEFT JOIN\n\t    jobs j ON e.job_id = j.job_id\n\t\tWHERE e.employee_id = ?;\\`\n\n\tif err := db.Raw(query, id).Scan(&employeeById).Error; err != nil {\n\t\treturn c.Status(500).JSON(fiber.Map{\"error\": \"Could not fetch employee\"})\n\t}\n\n\tif employeeById.ID == 0 {\n\t\treturn c.Status(404).JSON(fiber.Map{\"error\": \"Employee not found\"})\n\t}\n\n\treturn c.Status(200).JSON(employeeById)\n}\n\nfunc upLoadImage(c *fiber.Ctx, db *gorm.DB) error {\n\t// รับไฟล์จาก request\n\tresult, _ := utils.VerifyToken(c.Cookies(\"emp_auth\"))\n\tid, ok := result[\"id\"].(float64)\n\tif !ok {\n\t\treturn c.Status(fiber.StatusInternalServerError).SendString(\"Failed to retrieve id\")\n\t}\n\n\tfile, err := c.FormFile(\"image\")\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n\t\t\t\"error\": \"Cannot get image file\",\n\t\t})\n\t}\n\n\t// เปิดไฟล์เพื่ออ่านข้อมูล\n\tfileHeader, err := file.Open()\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Cannot open image file\",\n\t\t})\n\t}\n\tdefer fileHeader.Close()\n\n\t// อ่านข้อมูลไฟล์ทั้งหมด\n\tfileData, err := io.ReadAll(fileHeader)\n\tif err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Cannot read image file\",\n\t\t})\n\t}\n\n\t// สร้าง record ในฐานข้อมูล\n\timage := models.Image{\n\t\tEmployeeID: int(id),\n\t\tFileName:   file.Filename,\n\t\tFileType:   file.Header.Get(\"Content-Type\"),\n\t\tFileData:   fileData,\n\t}\n\n\t// บันทึกข้อมูลลงในฐานข้อมูล\n\tif err := db.Create(&image).Error; err != nil {\n\t\treturn c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n\t\t\t\"error\": \"Cannot save image information\",\n\t\t})\n\t}\n\n\t// ส่ง response กลับไป\n\treturn c.JSON(fiber.Map{\n\t\t\"message\":   \"Image uploaded successfully\",\n\t\t\"image_id\":  image.ID,\n\t\t\"file_name\": image.FileName,\n\t})\n\n}\n\nfunc getImage(c *fiber.Ctx, db *gorm.DB) error {\n\t// รับ id ของภาพจาก URL parameter\n\timageID := c.Params(\"id\")\n\n\t// สร้างโครงสร้างของ Image สำหรับการค้นหาจากฐานข้อมูล\n\tvar image models.Image\n\tif err := db.First(&image, \"employee_id = ?\", imageID).Error; err != nil {\n\t\treturn c.Status(fiber.StatusNotFound).JSON(fiber.Map{\n\t\t\t\"error\": \"Image not found\",\n\t\t})\n\t}\n\n\t// ตั้งค่า Content-Type ให้ตรงกับประเภทของไฟล์\n\tc.Set(\"Content-Type\", image.FileType)\n\n\t// ส่งข้อมูลไฟล์กลับไป\n\treturn c.Send(image.FileData)\n}\n\n`,\n  bcrypt: `package utils\n\nimport(\n\t\"golang.org/x/crypto/bcrypt\"\n)\n\nfunc HashPassword(password string) (string, error) {\n    bytes, err := bcrypt.GenerateFromPassword([]byte(password), 10)\n    return string(bytes), err\n}\n\nfunc CheckPasswordHash(password, hash string) bool {\n    err := bcrypt.CompareHashAndPassword([]byte(hash), []byte(password))\n    return err == nil\n}\n\n`,\n  jwt: `package utils\n\nimport (\n\t\"crypto/rsa\"\n\t\"errors\"\n\t\"github.com/golang-jwt/jwt/v5\"\n\t\"os\"\n\t\"time\"\n)\n// sh\n// # create Private Key\n// openssl genpkey -algorithm RSA -out private.key-pkeyopt rsa_keygen_bits:2048\n\n// # create Public Key จาก Private Key\n// openssl rsa -pubout -in private.key -out public.key\n\nvar (\n\tprivateKey *rsa.PrivateKey\n\tpublicKey  *rsa.PublicKey\n)\n\n// Initialize keys\nfunc init() {\n\t// Load Private Key\n\tprivateKeyData, err := os.ReadFile(\"src/utils/private.key\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tprivateKey, err = jwt.ParseRSAPrivateKeyFromPEM(privateKeyData)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Load Public Key\n\tpublicKeyData, err := os.ReadFile(\"src/utils/public.key\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tpublicKey, err = jwt.ParseRSAPublicKeyFromPEM(publicKeyData)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// CreateToken generates a new JWT token with the provided user ID, email, and role\nfunc CreateToken(id uint, email string, role string) (string, error) {\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodRS256,\n\t\tjwt.MapClaims{\n\t\t\t\"id\":    id,\n\t\t\t\"email\": email,\n\t\t\t\"role\":  role,\n\t\t\t\"exp\":   time.Now().Add(time.Hour * 24).Unix(), // Token expires in 24 hours\n\t\t})\n\n\ttokenString, err := token.SignedString(privateKey)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn tokenString, nil\n}\n\n// VerifyToken parses and validates the provided JWT token string\nfunc VerifyToken(tokenString string) (jwt.MapClaims, error) {\n\ttoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\n\t\t// Ensure the token's signing method is RSA and the same as expected\n\t\tif _, ok := token.Method.(*jwt.SigningMethodRSA); !ok {\n\t\t\treturn nil, errors.New(\"unexpected signing method\")\n\t\t}\n\t\treturn publicKey, nil\n\t})\n\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check if the token is valid and contains claims\n\tif claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {\n\t\treturn claims, nil\n\t}\n\n\treturn nil, errors.New(\"invalid token\")\n}\n`,\n};\n\nexport { details, code };\n"],"names":[],"mappings":";;;;AAAA,MAAM,UAAU;IACd,OACE;AACJ;AAEA,MAAM,OAAO;IACX,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+CP,CAAC;IACD,IAAI,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DP,CAAC;IACC,IAAI,CAAC;;;;;;;;;;;;;;AAcP,CAAC;IACC,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoGX,CAAC;IACC,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4KT,CAAC;IACC,KAAK,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuLR,CAAC;IACC,QAAQ,CAAC;;;;;;;;;;;;;;;;AAgBX,CAAC;IACC,KAAK,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFR,CAAC;AACD"}},
    {"offset": {"line": 1073, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1078, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/authentication/page.tsx"],"sourcesContent":["import { Chip } from \"@nextui-org/chip\";\nimport { Divider } from \"@nextui-org/divider\";\nimport { Image } from \"@nextui-org/image\";\nimport { Link } from \"@nextui-org/link\";\nimport { details } from \"./data\";\nimport Display from \"./display\";\n\nexport default function Authentication() {\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-4xl font-bold\">Authentication</h1>\n      <Divider className=\"my-2\" />\n      <p className=\"indent-10 text-pretty\">{details.title}</p>\n      <br />\n      <h3>\n        การนำ Authentication มาใช้ในระบบสามารถพบได้ในหลากหลายบริบท ตัวอย่างเช่น\n      </h3>\n      <div className=\"pl-4 flex flex-col gap-2 mt-2\">\n        <span className=\"flex gap-2\">\n          <p className=\"font-bold\">ระบบล็อกอินเว็บไซต์</p>\n          เมื่อผู้ใช้พยายามเข้าสู่ระบบของเว็บไซต์ เช่น Facebook หรือ Gmail\n          ผู้ใช้ต้องใส่ชื่อผู้ใช้และรหัสผ่านเพื่อยืนยันตัวตน\n        </span>\n        <span className=\"flex gap-2\">\n          <p className=\"font-bold\">แอปพลิเคชันธนาคาร</p>\n          ผู้ใช้ต้องใส่รหัสผ่านหรือใช้การสแกนใบหน้า/ลายนิ้วมือเพื่อยืนยันตัวตนในการเข้าถึงบัญชีธนาคารของตน\n        </span>\n        <span className=\"flex gap-2\">\n          <p className=\"font-bold\">การเข้าถึงเครือข่ายองค์กร</p>\n          พนักงานที่ต้องการเข้าถึงข้อมูลในเครือข่ายภายในขององค์กรต้องยืนยันตัวตนผ่านการกรอกชื่อผู้ใช้และรหัสผ่านหรือใช้การยืนยันตัวตนแบบสองขั้นตอน\n          (Two-Factor Authentication)\n        </span>\n        <span className=\"flex gap-2\">\n          <p className=\"font-bold\">การยืนยันตัวตนผ่าน OTP</p>\n          ในกรณีที่มีการทำธุรกรรมออนไลน์ ผู้ใช้จะได้รับรหัส OTP ทาง SMS\n          หรืออีเมล และต้องกรอกรหัสนี้เพื่อยืนยันตัวตน\n        </span>\n        <span className=\"flex gap-2\">\n          <p className=\"font-bold\">การใช้บัตรพนักงาน</p>\n          การใช้บัตรพนักงานหรือบัตรประจำตัวประชาชนเพื่อนำไปสแกนผ่านเครื่องอ่านบัตรเพื่อเข้าอาคารหรือพื้นที่ที่ต้องการความปลอดภัยสูง\n        </span>\n      </div>\n      <br />\n      <h3>ยกตัวอย่างการทำระบบล็อกอินเว็บไซต์</h3>\n      <p className=\"indent-10 text-pretty\">\n        การทำระบบล็อกอินเว็บไซต์นั้นมีหลากหลายวิธีมาก ในที่นี้เราจะลองทำ Login\n        ด้วย Authentication JSON Web Token เก็บผ่าน Cookie แล้วให้ server อ่าน\n        cookie (ที่แนบมาคู่กับ HTTP request) เพื่อทำการเช็คว่า token\n        ถูกต้องหรือไม่\n      </p>\n      <Image\n        isZoomed\n        alt=\"Flowchart\"\n        src=\"Flowchart.jpg\"\n        className=\"size-4/6 mx-auto my-4\"\n      />\n      <h3 className=\"font-bold text-xl\">JSON Web Token คืออะไร ?</h3>\n      <span className=\"indent-10 text-pretty\">\n        <Link className=\" cursor-pointer\" href=\"https://jwt.io/\" isExternal>\n          JSON Web Token (JWT)\n        </Link>\n        คือมาตรฐานเปิดที่ใช้ในการแลกเปลี่ยนข้อมูลที่ถูกเข้ารหัสระหว่างฝ่ายต่างๆ\n        (เช่น ระหว่างเซิร์ฟเวอร์กับไคลเอนต์) ในรูปแบบของ JSON โดยข้อมูลภายใน JWT\n        จะถูกเซ็นด้วยวิธีการเข้ารหัสเพื่อยืนยันความถูกต้องและความสมบูรณ์ของข้อมูล\n      </span>\n\n      <h3 className=\"mt-4\">JWT ประกอบด้วยสามส่วนหลัก ๆ ดังนี้</h3>\n      <div className=\"pl-4 flex flex-col gap-2 mt-2\">\n        <span className=\"flex gap-2 text-pretty\">\n          <p className=\"font-bold\">Header</p>\n          ประกอบด้วยข้อมูลประเภทของโทเค็น (มักจะเป็น JWT)\n          และอัลกอริทึมที่ใช้เซ็น เช่น HS256 หรือ RS256\n        </span>\n        <span className=\"flex gap-2 text-pretty\">\n          <p className=\"font-bold\">Payload</p>\n          ข้อมูลที่ต้องการส่ง เช่น ข้อมูลผู้ใช้ สิทธิ์การเข้าถึง หรือข้อมูลอื่น\n          ๆ โดยข้อมูลในส่วนนี้ไม่ถูกเข้ารหัสลับ (encryption)\n          แต่จะถูกเข้ารหัสเซ็นชื่อ (signing) เพื่อให้แน่ใจว่าไม่ถูกเปลี่ยนแปลง\n        </span>\n        <span className=\"flex gap-2 text-pretty\">\n          <p className=\"font-bold\">Signature</p>\n          เป็นการเข้ารหัสข้อมูลของส่วนหัวและส่วนข้อมูลโดยใช้อัลกอริทึมและกุญแจลับที่กำหนดขึ้น\n          เพื่อรับรองว่าข้อมูลไม่ถูกดัดแปลง\n        </span>\n      </div>\n      <br />\n      <p className=\"text-pretty indent-10\">\n        อย่างไรก็ตาม การเข้ารหัสด้วย JWT สามารถ decode กลับมาได้ ดังนั้น\n        ไม่ควรเก็บข้อมูลที่ sensitive เช่น password ข้อมูลบัตรเครดิต\n        ข้อมูลส่วนตัวที่ละเอียดอ่อน (เลขประจำตัวประชาชน) เพราะ Payload ของ JWT\n        ไม่ได้ถูกเข้ารหัสแบบปกปิด (encryption) แต่เพียงแค่ถูกเข้ารหัสเซ็นชื่อ\n        (signing) ซึ่งหมายความว่าใครก็ตามที่มีโทเค็น JWT สามารถทำการ decode\n        ข้อมูลใน Payload กลับมาได้ง่าย ๆ โดยใช้เครื่องมือที่หาได้ทั่วไป เช่น\n        jwt.io\n      </p>\n      <br />\n      <span className=\"text-pretty\">\n        <p className=\"font-bold text-[#F31260]\">\n          *ถ้าเเบบนี้เราก็สามารถสร้าง jwt token ผ่านเครื่องมือทั่วไปอย่าง jwt.io\n          เพื่อปลอมเป็นคนอื่นได้ใช่ไหม ?{\" \"}\n        </p>\n        ต้องบอกว่า jwt จะมีส่วนที่เป็น Signature ส่วนนี้จะเก็บกุญเเจในการสร้าง\n        token ขึ้นมา ถ้ากุญเเจไม่ตรงกันก็จะไม่ทำการ decode (false) Signature\n        นี้จะถูกเก็บอยู่กับฝั่ง server ซึ่งต้องรักษาไว้ให้ดี\n      </span>\n\n      <div className=\"mt-4\">\n        <p className=\"text-pretty\">\n          เรามาลองสร้างระบบ Employee System ด้วยภาษา Go กันนะครับ\n          โดยเราจะมีการทำ Authentication การทำ Middleware ให้ทำการ Login\n          ก่อนที่จะเข้ามาที่ API เส้นนี้ได้\n        </p>\n      </div>\n      <Display />\n      <br />\n      <span className=\" font-bold\">\n        Git Repositories:{\" \"}\n        <Link\n          href=\"https://github.com/phonsing-Hub/EmployeeSystem\"\n          isExternal\n          showAnchorIcon\n          className=\"cursor-pointer\"\n        >\n          github.com/phonsing-Hub/EmployeeSystem\n        </Link>{\" \"}\n      </span>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAOe,SAAS;IACtB,qBACE,wPAAC;QAAI,WAAU;;0BACb,wPAAC;gBAAG,WAAU;0BAAqB;;;;;;0BACnC,wPAAC,sNAAA,CAAA,UAAO;gBAAC,WAAU;;;;;;0BACnB,wPAAC;gBAAE,WAAU;0BAAyB,6HAAA,CAAA,UAAO,CAAC,KAAK;;;;;;0BACnD,wPAAC;;;;;0BACD,wPAAC;0BAAG;;;;;;0BAGJ,wPAAC;gBAAI,WAAU;;kCACb,wPAAC;wBAAK,WAAU;;0CACd,wPAAC;gCAAE,WAAU;0CAAY;;;;;;4BAAuB;;;;;;;kCAIlD,wPAAC;wBAAK,WAAU;;0CACd,wPAAC;gCAAE,WAAU;0CAAY;;;;;;4BAAqB;;;;;;;kCAGhD,wPAAC;wBAAK,WAAU;;0CACd,wPAAC;gCAAE,WAAU;0CAAY;;;;;;4BAA6B;;;;;;;kCAIxD,wPAAC;wBAAK,WAAU;;0CACd,wPAAC;gCAAE,WAAU;0CAAY;;;;;;4BAA0B;;;;;;;kCAIrD,wPAAC;wBAAK,WAAU;;0CACd,wPAAC;gCAAE,WAAU;0CAAY;;;;;;4BAAqB;;;;;;;;;;;;;0BAIlD,wPAAC;;;;;0BACD,wPAAC;0BAAG;;;;;;0BACJ,wPAAC;gBAAE,WAAU;0BAAwB;;;;;;0BAMrC,wPAAC,0JAAA,CAAA,QAAK;gBACJ,QAAQ;gBACR,KAAI;gBACJ,KAAI;gBACJ,WAAU;;;;;;0BAEZ,wPAAC;gBAAG,WAAU;0BAAoB;;;;;;0BAClC,wPAAC;gBAAK,WAAU;;kCACd,wPAAC,yJAAA,CAAA,OAAI;wBAAC,WAAU;wBAAkB,MAAK;wBAAkB,UAAU;kCAAC;;;;;;oBAE7D;;;;;;;0BAMT,wPAAC;gBAAG,WAAU;0BAAO;;;;;;0BACrB,wPAAC;gBAAI,WAAU;;kCACb,wPAAC;wBAAK,WAAU;;0CACd,wPAAC;gCAAE,WAAU;0CAAY;;;;;;4BAAU;;;;;;;kCAIrC,wPAAC;wBAAK,WAAU;;0CACd,wPAAC;gCAAE,WAAU;0CAAY;;;;;;4BAAW;;;;;;;kCAKtC,wPAAC;wBAAK,WAAU;;0CACd,wPAAC;gCAAE,WAAU;0CAAY;;;;;;4BAAa;;;;;;;;;;;;;0BAK1C,wPAAC;;;;;0BACD,wPAAC;gBAAE,WAAU;0BAAwB;;;;;;0BASrC,wPAAC;;;;;0BACD,wPAAC;gBAAK,WAAU;;kCACd,wPAAC;wBAAE,WAAU;;4BAA2B;4BAEP;;;;;;;oBAC7B;;;;;;;0BAMN,wPAAC;gBAAI,WAAU;0BACb,cAAA,wPAAC;oBAAE,WAAU;8BAAc;;;;;;;;;;;0BAM7B,wPAAC,iIAAA,CAAA,UAAO;;;;;0BACR,wPAAC;;;;;0BACD,wPAAC;gBAAK,WAAU;;oBAAa;oBACT;kCAClB,wPAAC,yJAAA,CAAA,OAAI;wBACH,MAAK;wBACL,UAAU;wBACV,cAAc;wBACd,WAAU;kCACX;;;;;;oBAEO;;;;;;;;;;;;;AAIhB"}},
    {"offset": {"line": 1455, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1466, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/.next-internal/server/app/authentication/page/actions.js"],"sourcesContent":["__turbopack_export_value__({\n});"],"names":[],"mappings":"AAAA,2BAA2B,CAC3B"}},
    {"offset": {"line": 1467, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}