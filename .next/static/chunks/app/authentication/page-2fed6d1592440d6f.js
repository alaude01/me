(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[940],{44141:function(e,n,r){Promise.resolve().then(r.bind(r,61420)),Promise.resolve().then(r.bind(r,84036)),Promise.resolve().then(r.bind(r,82120))},61420:function(e,n,r){"use strict";r.d(n,{default:function(){return T}});var t=r(57437),o=r(2265),i=r(9196),a=r(882),s=r(91863),l=r(48496),m=r(99827),d=r(44839),u=r(96164);function c(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return(0,u.m6)((0,d.W)(n))}var g=r(71538);let p=(0,r(12218).j)("inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",{variants:{variant:{default:"bg-primary text-primary-foreground hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/90",outline:"border border-input bg-background hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-10 px-4 py-2",sm:"h-9 rounded-md px-3",lg:"h-11 rounded-md px-8",icon:"h-10 w-10"}},defaultVariants:{variant:"default",size:"default"}}),f=o.forwardRef((e,n)=>{let{className:r,variant:o,size:i,asChild:a=!1,...s}=e,l=a?g.g7:"button";return(0,t.jsx)(l,{className:c(p({variant:o,size:i,className:r})),ref:n,...s})});f.displayName="Button";var b=r(2286);let y=o.forwardRef((e,n)=>{let{className:r,children:o,...i}=e;return(0,t.jsxs)(b.fC,{ref:n,className:c("relative overflow-hidden",r),...i,children:[(0,t.jsx)(b.l_,{className:"h-full w-full rounded-[inherit]",children:o}),(0,t.jsx)(h,{}),(0,t.jsx)(b.Ns,{})]})});y.displayName=b.fC.displayName;let h=o.forwardRef((e,n)=>{let{className:r,orientation:o="vertical",...i}=e;return(0,t.jsx)(b.gb,{ref:n,orientation:o,className:c("flex touch-none select-none transition-colors","vertical"===o&&"h-full w-2.5 border-l border-l-transparent p-[1px]","horizontal"===o&&"h-2.5 flex-col border-t border-t-transparent p-[1px]",r),...i,children:(0,t.jsx)(b.q4,{className:"relative flex-1 rounded-full bg-border"})})});h.displayName=b.gb.displayName;let S=(0,o.createContext)(null),j=()=>{let e=(0,o.useContext)(S);if(!e)throw Error("useTree must be used within a TreeProvider");return e},E=(0,o.forwardRef)((e,n)=>{let{className:r,elements:i,initialSelectedId:s,initialExpandedItems:l,children:m,indicator:d=!0,openIcon:u,closeIcon:g,dir:p,...f}=e,[b,h]=(0,o.useState)(s),[j,E]=(0,o.useState)(l),v=(0,o.useCallback)(e=>{h(e)},[]),_=(0,o.useCallback)(e=>{E(n=>(null==n?void 0:n.includes(e))?n.filter(n=>n!==e):[...null!=n?n:[],e])},[]),x=(0,o.useCallback)((e,n)=>{if(!e||!n)return;let r=function(e){var t;let o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],i=null===(t=e.isSelectable)||void 0===t||t,a=[...o,e.id];if(e.id===n){i?E(e=>[...null!=e?e:[],...a]):a.includes(e.id)&&(a.pop(),E(e=>[...null!=e?e:[],...a]));return}i&&e.children&&e.children.length>0&&e.children.forEach(e=>{r(e,a)})};e.forEach(e=>{r(e)})},[]);(0,o.useEffect)(()=>{s&&x(i,s)},[s,i]);let k="rtl"===p?"rtl":"ltr";return(0,t.jsx)(S.Provider,{value:{selectedId:b,expandedItems:j,handleExpand:_,selectItem:v,setExpandedItems:E,indicator:d,openIcon:u,closeIcon:g,direction:k},children:(0,t.jsx)("div",{className:c("size-full",r),children:(0,t.jsx)(y,{ref:n,className:"h-full relative px-2",dir:p,children:(0,t.jsx)(a.fC,{...f,type:"multiple",defaultValue:j,value:j,className:"flex flex-col gap-1",onValueChange:e=>E(n=>[...null!=n?n:[],e[0]]),dir:p,children:m})})})})});E.displayName="Tree";let v=(0,o.forwardRef)((e,n)=>{let{className:r,...o}=e,{direction:i}=j();return(0,t.jsx)("div",{dir:i,ref:n,className:c("h-full w-px bg-muted absolute left-1.5 rtl:right-1.5 py-3 rounded-md hover:bg-slate-300 duration-300 ease-in-out",r),...o})});v.displayName="TreeIndicator";let _=(0,o.forwardRef)((e,n)=>{let{className:r,element:o,value:i,isSelectable:m=!0,isSelect:d,children:u,...g}=e,{direction:p,handleExpand:f,expandedItems:b,indicator:y,setExpandedItems:h,openIcon:S,closeIcon:E}=j();return(0,t.jsxs)(a.ck,{...g,value:i,className:"relative overflow-hidden h-full ",children:[(0,t.jsxs)(a.xz,{className:c("flex items-center gap-1 text-sm rounded-md",r,{"bg-muted rounded-md":d&&m,"cursor-pointer":m,"cursor-not-allowed opacity-50":!m}),disabled:!m,onClick:()=>f(i),children:[(null==b?void 0:b.includes(i))?null!=S?S:(0,t.jsx)(s.Z,{className:"size-4"}):null!=E?E:(0,t.jsx)(l.Z,{className:"size-4"}),(0,t.jsx)("span",{children:o})]}),(0,t.jsxs)(a.VY,{className:"text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down relative overflow-hidden h-full",children:[o&&y&&(0,t.jsx)(v,{"aria-hidden":"true"}),(0,t.jsx)(a.fC,{dir:p,type:"multiple",className:"flex flex-col gap-1 py-1 ml-5 rtl:mr-5 ",defaultValue:b,value:b,onValueChange:e=>{null==h||h(n=>[...null!=n?n:[],e[0]])},children:u})]})]})});_.displayName="Folder";let x=(0,o.forwardRef)((e,n)=>{let{value:r,className:o,handleSelect:i,isSelectable:s=!0,isSelect:l,fileIcon:d,children:u,...g}=e,{direction:p,selectedId:f,selectItem:b}=j(),y=null!=l?l:f===r;return(0,t.jsx)(a.ck,{value:r,className:"relative",children:(0,t.jsxs)(a.xz,{ref:n,...g,dir:p,disabled:!s,"aria-label":"File",className:c("flex items-center gap-1 cursor-pointer text-sm pr-1 rtl:pl-1 rtl:pr-0 rounded-md  duration-200 ease-in-out",{"bg-muted":y&&s},s?"cursor-pointer":"opacity-50 cursor-not-allowed",o),onClick:()=>b(r),children:[null!=d?d:(0,t.jsx)(m.Z,{className:"size-4"}),u]})})});x.displayName="File",(0,o.forwardRef)((e,n)=>{let{className:r,elements:i,expandAll:a=!1,children:s,...l}=e,{expandedItems:m,setExpandedItems:d}=j(),u=(0,o.useCallback)(e=>{let n=e=>{var r;(null===(r=e.isSelectable)||void 0===r||r)&&e.children&&e.children.length>0&&(null==d||d(n=>[...null!=n?n:[],e.id]),e.children.forEach(n))};e.forEach(n)},[]),c=(0,o.useCallback)(()=>{null==d||d([])},[]);return(0,o.useEffect)(()=>{console.log(a),a&&u(i)},[a]),(0,t.jsxs)(f,{variant:"ghost",className:"h-8 w-fit p-1 absolute bottom-1 right-2",onClick:m&&m.length>0?c:()=>u(i),ref:n,...l,children:[s,(0,t.jsx)("span",{className:"sr-only",children:"Toggle"})]})}).displayName="CollapseButton";var k=r(85169),w=r(44025),D=r(59538),N=r(29248),C=e=>{let{code:n,language:r}=e,{theme:i,resolvedTheme:a}=(0,k.F)(),[s,l]=(0,o.useState)(!1);return((0,o.useEffect)(()=>{l(!0)},[]),s)?(0,t.jsx)(w.Z,{language:r,style:"light"===a?D.Z:N.Z,customStyle:{borderRadius:"0.75rem"},showLineNumbers:!0,children:n}):null};let I={main:'package main\n\nimport (\n	"github.com/gofiber/fiber/v2"\n	"github.com/gofiber/fiber/v2/middleware/cors"\n	"github.com/gofiber/fiber/v2/middleware/logger"\n	"github.com/joho/godotenv"\n	"github.com/phonsing-Hub/EmployeeSystem/src/db"\n	"github.com/phonsing-Hub/EmployeeSystem/src/middleware"\n	"github.com/phonsing-Hub/EmployeeSystem/src/routing/auth"\n	"github.com/phonsing-Hub/EmployeeSystem/src/routing/emp"\n	"os"\n	"time"\n)\n\nfunc main() {\n	err := godotenv.Load()\n	if err != nil {\n		panic("Error loading .env file")\n	}\n	api := os.Getenv("API_VERSION")\n	dbuser := os.Getenv("DB_USER")\n	dbpass := os.Getenv("DB_PASS")\n	dbhost := os.Getenv("DB_HOST")\n	dbname := os.Getenv("DB_NAME")\n\n	db, err := db.New(dbuser, dbpass, dbhost, dbname)\n	if err != nil {\n		panic("failed to connect to database")\n	}\n	app := fiber.New()\n	app.Use(cors.New(cors.Config{\n		AllowOrigins:     "http://localhost:5173",                       \n		AllowMethods:     "GET, POST, PUT, DELETE, OPTIONS",             \n		AllowHeaders:     "Origin, Content-Type, Accept, Authorization", \n		AllowCredentials: true,                                          \n		MaxAge:           int(24 * time.Hour / time.Second),             \n	}))\n\n	app.Use(logger.New())\n	//localhost/v1/auth\n	auth_v1 := app.Group(api + "/auth")\n	auth.SetAuthentication(auth_v1, db.DB)\n	emp_v1 := app.Group(api+"/employees", middleware.Token)\n	emp.EmployeesRouting(emp_v1, db.DB)\n	app.Listen(":3000")\n}\n  ',db:'package db\n\nimport (\n	"fmt"\n	"os"\n	"time"\n	"github.com/phonsing-Hub/EmployeeSystem/src/models"\n	"gorm.io/driver/mysql"\n	"gorm.io/gorm"\n	"gorm.io/gorm/logger"\n	"log"\n)\n\ntype Db struct {\n	DB *gorm.DB\n}\n\nfunc New(dbuser string, dbpass string, dbhost string, dbname string) (*Db, error) {\n	dsn := fmt.Sprintf("%s:%s@tcp(%s)/%s?charset=utf8mb4&parseTime=True&loc=Local",\n		dbuser, dbpass, dbhost, dbname)\n	db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{Logger: loggerConfig(true)})\n	if err != nil {\n		return nil, err\n	}\n	err = db.AutoMigrate(\n		&models.Region{},\n		&models.Country{},\n		&models.Location{},\n		&models.Job{},\n		&models.Department{},\n		&models.Employee{},\n		&models.Dependent{},\n		&models.AuthUser{},\n		&models.Token{},\n		&models.Image{},\n	)\n\n	if err != nil {\n		log.Fatalf("ไม่สามารถ migrate ตารางได้: %v", err)\n	}\n	return &Db{DB: db}, nil\n}\n\nfunc loggerConfig(enable bool) logger.Interface {\n	if enable {\n		newLogger := logger.New(\n			log.New(os.Stdout, "\r\n", log.LstdFlags), // io writer\n			logger.Config{\n				SlowThreshold:             time.Second, // Slow SQL threshold\n				LogLevel:                  logger.Info, // Set log level\n				IgnoreRecordNotFoundError: true,        // Ignore ErrRecordNotFound errors\n				ParameterizedQueries:      true,        // Don\'t include raw SQL queries in logs\n				Colorful:                  true,        // Colorize logs\n			},\n		)\n		return newLogger\n	}\n\n	// Default silent logger if not enabled\n	return logger.Default.LogMode(logger.Silent)\n}\n',md:'package middleware\nimport(\n	"github.com/gofiber/fiber/v2"\n	"github.com/phonsing-Hub/EmployeeSystem/src/utils"\n\n)\n\nfunc Token(c *fiber.Ctx) error {\n	_, err := utils.VerifyToken(c.Cookies("emp_auth"));\n	if err != nil {\n		return c.Status(fiber.StatusUnauthorized).SendString("Unauthorized");\n	}\n	return c.Next();\n}\n',models:'package models\n\nimport "time"\n\ntype Region struct {\n	ID         int       `gorm:"column:region_id;primaryKey;autoIncrement" json:"region_id"`\n	RegionName string    `gorm:"column:region_name" json:"region_name"`\n	Countries  []Country `gorm:"foreignKey:RegionID" json:"countries"`\n}\n\ntype Country struct {\n	ID          string     `gorm:"column:country_id;primaryKey;size:2" json:"country_id"`\n	CountryName string     `gorm:"column:country_name" json:"country_name"`\n	RegionID    int        `gorm:"column:region_id" json:"region_id"`\n	Region      Region     `gorm:"foreignKey:RegionID" json:"region"`\n	Locations   []Location `gorm:"foreignKey:CountryID" json:"locations"`\n}\n\ntype Location struct {\n	ID            int          `gorm:"column:location_id;primaryKey;autoIncrement" json:"location_id"`\n	StreetAddress string       `gorm:"column:street_address" json:"street_address"`\n	PostalCode    string       `gorm:"column:postal_code" json:"postal_code"`\n	City          string       `gorm:"column:city;not null" json:"city"`\n	StateProvince string       `gorm:"column:state_province" json:"state_province"`\n	CountryID     string       `gorm:"column:country_id;size:2;not null" json:"country_id"`\n	Country       Country      `gorm:"foreignKey:CountryID" json:"country"`\n	Departments   []Department `gorm:"foreignKey:LocationID" json:"departments"`\n}\n\ntype Job struct {\n	ID        int        `gorm:"column:job_id;primaryKey;autoIncrement" json:"job_id"`\n	JobTitle  string     `gorm:"column:job_title;not null" json:"job_title"`\n	MinSalary float64    `gorm:"column:min_salary" json:"min_salary"`\n	MaxSalary float64    `gorm:"column:max_salary" json:"max_salary"`\n	Employees []Employee `gorm:"foreignKey:JobID" json:"employees"`\n}\n\ntype Department struct {\n	ID             int        `gorm:"column:department_id;primaryKey;autoIncrement" json:"department_id"`\n	DepartmentName string     `gorm:"column:department_name;not null" json:"department_name"`\n	LocationID     int        `gorm:"column:location_id" json:"location_id"`\n	Location       Location   `gorm:"foreignKey:LocationID" json:"location"`\n	Employees      []Employee `gorm:"foreignKey:DepartmentID" json:"employees"`\n}\n\ntype Employee struct {\n	ID           int         `gorm:"column:employee_id;primaryKey;autoIncrement" json:"employee_id"`\n	FirstName    string      `gorm:"column:first_name" json:"first_name"`\n	LastName     string      `gorm:"column:last_name;not null" json:"last_name"`\n	Email        string      `gorm:"column:email;not null" json:"email"`\n	PhoneNumber  string      `gorm:"column:phone_number" json:"phone_number"`\n	HireDate     time.Time   `gorm:"column:hire_date;not null" json:"hire_date"`\n	JobID        int         `gorm:"column:job_id;not null" json:"job_id"`\n	Job          Job         `gorm:"foreignKey:JobID" json:"job"`\n	Salary       float64     `gorm:"column:salary;not null" json:"salary"`\n	ManagerID    *int        `gorm:"column:manager_id" json:"manager_id"`\n	Manager      *Employee   `gorm:"foreignKey:ManagerID" json:"manager"`\n	DepartmentID *int        `gorm:"column:department_id" json:"department_id"`\n	Department   *Department `gorm:"foreignKey:DepartmentID" json:"department"`\n	Subordinates []Employee  `gorm:"foreignKey:ManagerID" json:"subordinates"`\n	Dependents   []Dependent `gorm:"foreignKey:EmployeeID" json:"dependents"`\n}\n\ntype Dependent struct {\n	ID           int      `gorm:"column:dependent_id;primaryKey;autoIncrement" json:"dependent_id"`\n	FirstName    string   `gorm:"column:first_name;not null" json:"first_name"`\n	LastName     string   `gorm:"column:last_name;not null" json:"last_name"`\n	Relationship string   `gorm:"column:relationship;not null" json:"relationship"`\n	EmployeeID   int      `gorm:"column:employee_id;not null" json:"employee_id"`\n	Employee     Employee `gorm:"foreignKey:EmployeeID" json:"employee"`\n}\n\n// AuthUser model for authentication\ntype AuthUser struct {\n	EmployeeID       int        `gorm:"primaryKey;" json:"employee_id"`\n	Email            string     `gorm:"type:varchar(100);unique;not null"`\n	Password         string     `gorm:"type:varchar(255);not null"` // Password should be hashed\n	LastLogin        *time.Time // Track the last login time\n	Role             string     `gorm:"type:varchar(20);default:admin"` // Default role is admin\n	ResetToken       string     `gorm:"type:varchar(255)"`              // For password reset functionality\n	ResetTokenExpiry *time.Time // For tracking token expiration\n	Employee         Employee   `gorm:"foreignKey:EmployeeID;constraint:OnUpdate:CASCADE,OnDelete:CASCADE" json:"employee"`\n}\n\n// Token model for managing JWT tokens\ntype Token struct {\n	UserID    int       `gorm:"not null"`\n	Token     string    `gorm:"type:text;not null"`\n	ExpiresAt time.Time `gorm:"not null"`\n	User      AuthUser  `gorm:"foreignKey:UserID;constraint:OnUpdate:CASCADE,OnDelete:CASCADE"`\n}\n\ntype Image struct {\n	ID         int      `gorm:"column:id;primaryKey;autoIncrement" json:"id"`\n	EmployeeID int      `gorm:"column:employee_id;not null" json:"employee_id"`\n	FileName   string   `gorm:"column:file_name;size:100" json:"file_name"`\n	FileType   string   `gorm:"column:file_type;size:100" json:"file_type"`\n	FileData   []byte   `gorm:"column:file_data;type:LONGBLOB" json:"file_data"`\n	Employee   Employee `gorm:"foreignKey:EmployeeID;constraint:OnUpdate:CASCADE,OnDelete:Cascade" json:"employee"`\n}\n',auth:'package auth\n\nimport (\n	"errors"\n\n	"github.com/gofiber/fiber/v2"\n	"github.com/phonsing-Hub/EmployeeSystem/src/models"\n	"github.com/phonsing-Hub/EmployeeSystem/src/utils"\n	"gorm.io/gorm"\n	"time"\n)\n\nfunc SetAuthentication(app fiber.Router, db *gorm.DB) {\n	app.Get("/", func(c *fiber.Ctx) error {\n		return auth(c, db)\n	})\n	app.Post("/register", func(c *fiber.Ctx) error {\n		return register(c, db)\n	})\n	app.Post("/login", func(c *fiber.Ctx) error {\n		return login(c, db)\n	})\n}\n\ntype Employees struct {\n	ID       uint   `json:"id"`\n	Email    string `json:"email"`\n	Password string `json:"pass"`\n	Role     string `json:"role"`\n}\n\nfunc auth(c *fiber.Ctx, db *gorm.DB) error {\n	var user struct {\n		ID         uint    `json:"id"`\n		Name       string  `json:"firstname"`\n		Lastname   string  `json:"lastname"`\n		Email      string  `json:"email"`\n		Phone      string  `json:"phone"`\n		Department string  `json:"departmentname"`\n		JobTitle   string  `json:"positions"`\n		Salary     float64 `json:"salary"`\n	}\n	token := c.Cookies("emp_auth")\n	if token == "" {\n		return c.Status(fiber.StatusUnauthorized).SendString("Unauthorized")\n	}\n	deta, err := utils.VerifyToken(c.Cookies("emp_auth"))\n	if err != nil {\n		return c.Status(fiber.StatusUnauthorized).SendString("Unauthorized")\n	}\n	id, ok := deta["id"]\n	if !ok {\n		return c.Status(fiber.StatusInternalServerError).SendString("Failed to retrieve id")\n	}\n\n	query := `\n	SELECT\n	    e.employee_id AS id,\n	    e.first_name AS name,\n	    e.last_name AS lastname,\n	    e.email,\n	    e.phone_number AS phone,\n	    d.department_name AS department,\n	    j.job_title AS job_title,\n	    e.salary\n	FROM\n	    employees e\n	LEFT JOIN\n	    departments d ON e.department_id = d.department_id\n	LEFT JOIN\n	    jobs j ON e.job_id = j.job_id\n	WHERE e.employee_id = ?;`\n\n	if err := db.Raw(query, id).Scan(&user).Error; err != nil {\n		return c.Status(500).JSON(fiber.Map{"error": "Could not fetch employee"})\n	}\n\n	if user.ID == 0 {\n		return c.Status(404).JSON(fiber.Map{"error": "Employee not found"})\n	}\n\n	return c.Status(200).JSON(user)\n}\n\nfunc register(c *fiber.Ctx, db *gorm.DB) error {\n	e := new(Employees)\n	if err := c.BodyParser(e); err != nil {\n		return c.Status(fiber.StatusBadRequest).SendString(err.Error())\n	}\n\n	hash, _ := utils.HashPassword(e.Password)\n	data := models.AuthUser{\n		EmployeeID: int(e.ID),\n		Email:      e.Email,\n		Password:   hash,\n		Role:       e.Role,\n	}\n	result := db.Create(&data)\n	if result.Error != nil {\n		return c.Status(fiber.StatusConflict).SendString("create user unsuccessful: " + result.Error.Error())\n	}\n\n	return c.Status(fiber.StatusCreated).SendString("create user successful!")\n}\n\nfunc login(c *fiber.Ctx, db *gorm.DB) error {\n	e := new(Employees)\n	if err := c.BodyParser(e); err != nil {\n		return c.Status(fiber.StatusBadRequest).SendString(err.Error())\n	}\n	var user models.AuthUser\n	//   SELECT id, email, password, role FROM mydb.auth_users WHERE email = ?\n	if err := db.Select("employee_id, email, password, role").Where("email = ?", e.Email).First(&user).Error; err != nil {\n		if errors.Is(err, gorm.ErrRecordNotFound) {\n			return c.Status(fiber.StatusNotFound).SendString("user not found")\n		}\n		return c.Status(fiber.StatusInternalServerError).SendString("error retrieving user")\n	}\n\n	if !utils.CheckPasswordHash(e.Password, user.Password) {\n		return c.Status(fiber.StatusUnauthorized).SendString("invalid password")\n	}\n\n	//set Tonken\n	token, err := utils.CreateToken(uint(user.EmployeeID), user.Email, user.Role)\n	if err != nil {\n		return c.Status(fiber.StatusConflict).SendString("create user unsuccessful: " + err.Error())\n	}\n	now := time.Now()\n	user.LastLogin = &now\n	//UPDATE auth_users SET last_login = <time.Now> WHERE id = <user.ID>;\n	if err := db.Model(&user).Update("last_login", user.LastLogin).Error; err != nil {\n		return c.Status(fiber.StatusInternalServerError).SendString("error updating last login time: " + err.Error())\n	}\n\n	var existingToken models.Token\n	err = db.Where("user_id = ?", user.EmployeeID).First(&existingToken).Error\n	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {\n		return c.Status(fiber.StatusInternalServerError).SendString("error checking for existing token: " + err.Error())\n	}\n\n	if errors.Is(err, gorm.ErrRecordNotFound) {\n		//INSERT INTO mydb.tokens (user_id, token, expires_at) VALUES(?, ?, ?);\n		tokenModel := models.Token{\n			UserID:    user.EmployeeID,\n			Token:     token,\n			ExpiresAt: time.Now().Add(24 * time.Hour),\n		}\n		if err := db.Create(&tokenModel).Error; err != nil {\n			return c.Status(fiber.StatusInternalServerError).SendString("error creating token: " + err.Error())\n		}\n	} else {\n		// UPDATE tokens SET token = <newTokenValue>, expires_at = <newExpiryTime>, updated_at = <currentTime> WHERE id = existingTokenID;\n		if err := db.Model(&existingToken).\n			Where("user_id = ?", user.EmployeeID).\n			Updates(models.Token{Token: token, ExpiresAt: time.Now().Add(24 * time.Hour)}).Error; err != nil {\n			return c.Status(fiber.StatusInternalServerError).SendString("error updating token: " + err.Error())\n		}\n	}\n	// set database : CREATE EVENT delete_expired_tokens ON SCHEDULE EVERY 1 HOUR DO DELETE FROM tokens WHERE expires_at < NOW();\n\n	c.Cookie(&fiber.Cookie{\n		Name:     "emp_auth",\n		Value:    token,\n		Expires:  time.Now().Add(time.Hour * 24),\n		HTTPOnly: true,\n		Secure:   true,\n		SameSite: "Strict",\n	})\n\n	return c.Status(fiber.StatusOK).SendString("login successful!")\n}\n',emp:'package emp\n\nimport (\n	"github.com/gofiber/fiber/v2"\n	"github.com/phonsing-Hub/EmployeeSystem/src/models"\n	"github.com/phonsing-Hub/EmployeeSystem/src/utils"\n	"gorm.io/gorm"\n	"io"\n	//"time"\n)\n\nfunc EmployeesRouting(app fiber.Router, db *gorm.DB) {\n	app.Get("/", func(c *fiber.Ctx) error {\n		return getAllEmployeeDetails(c, db)\n	})\n	app.Get("/:id", func(c *fiber.Ctx) error {\n		return getAllEmployeeById(c, db)\n	})\n	app.Post("/new", func(c *fiber.Ctx) error {\n		return upLoadImage(c, db)\n	})\n\n	app.Get("image/:id", func(c *fiber.Ctx) error {\n		return getImage(c, db)\n	})\n\n}\n\nfunc getAllEmployeeDetails(c *fiber.Ctx, db *gorm.DB) error {\n	var employeeDetails []struct {\n		ID         uint    `json:"id"`\n		Name       string  `json:"firstname"`\n		Lastname   string  `json:"lastname"`\n		Email      string  `json:"email"`\n		Phone      string  `json:"phone"`\n		Department string  `json:"department"`\n		JobTitle   string  `json:"positions"`\n		Hiredate   string  `json:"hiredate"`\n		Salary     float64 `json:"salary"`\n	}\n\n	query := `\n	SELECT\n	    e.employee_id AS id,\n	    e.first_name AS name,\n	    e.last_name AS lastname,\n	    e.email,\n	    e.phone_number AS phone,\n	    d.department_name AS department,\n	    j.job_title AS job_title,\n		e.hire_date AS hiredate,\n	    e.salary\n	FROM\n	    employees e\n	LEFT JOIN\n	    departments d ON e.department_id = d.department_id\n	LEFT JOIN\n	    jobs j ON e.job_id = j.job_id;`\n\n	if err := db.Raw(query).Scan(&employeeDetails).Error; err != nil {\n		return c.Status(500).JSON(fiber.Map{"error": "Could not fetch employee details"})\n	}\n\n	return c.Status(200).JSON(employeeDetails)\n}\n\nfunc getAllEmployeeById(c *fiber.Ctx, db *gorm.DB) error {\n	id := c.Params("id")\n	var employeeById struct {\n		ID         uint    `json:"id"`\n		Name       string  `json:"firstname"`\n		Lastname   string  `json:"lastname"`\n		Email      string  `json:"email"`\n		Phone      string  `json:"phone"`\n		Department string  `json:"departmentname"`\n		JobTitle   string  `json:"positions"`\n		Salary     float64 `json:"salary"`\n	}\n\n	query := `\n	SELECT\n	    e.employee_id AS id,\n	    e.first_name AS name,\n	    e.last_name AS lastname,\n	    e.email,\n	    e.phone_number AS phone,\n	    d.department_name AS department,\n	    j.job_title AS job_title,\n	    e.salary\n	FROM\n	    employees e\n	LEFT JOIN\n	    departments d ON e.department_id = d.department_id\n	LEFT JOIN\n	    jobs j ON e.job_id = j.job_id\n		WHERE e.employee_id = ?;`\n\n	if err := db.Raw(query, id).Scan(&employeeById).Error; err != nil {\n		return c.Status(500).JSON(fiber.Map{"error": "Could not fetch employee"})\n	}\n\n	if employeeById.ID == 0 {\n		return c.Status(404).JSON(fiber.Map{"error": "Employee not found"})\n	}\n\n	return c.Status(200).JSON(employeeById)\n}\n\nfunc upLoadImage(c *fiber.Ctx, db *gorm.DB) error {\n	// รับไฟล์จาก request\n	result, _ := utils.VerifyToken(c.Cookies("emp_auth"))\n	id, ok := result["id"].(float64)\n	if !ok {\n		return c.Status(fiber.StatusInternalServerError).SendString("Failed to retrieve id")\n	}\n\n	file, err := c.FormFile("image")\n	if err != nil {\n		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\n			"error": "Cannot get image file",\n		})\n	}\n\n	// เปิดไฟล์เพื่ออ่านข้อมูล\n	fileHeader, err := file.Open()\n	if err != nil {\n		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n			"error": "Cannot open image file",\n		})\n	}\n	defer fileHeader.Close()\n\n	// อ่านข้อมูลไฟล์ทั้งหมด\n	fileData, err := io.ReadAll(fileHeader)\n	if err != nil {\n		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n			"error": "Cannot read image file",\n		})\n	}\n\n	// สร้าง record ในฐานข้อมูล\n	image := models.Image{\n		EmployeeID: int(id),\n		FileName:   file.Filename,\n		FileType:   file.Header.Get("Content-Type"),\n		FileData:   fileData,\n	}\n\n	// บันทึกข้อมูลลงในฐานข้อมูล\n	if err := db.Create(&image).Error; err != nil {\n		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{\n			"error": "Cannot save image information",\n		})\n	}\n\n	// ส่ง response กลับไป\n	return c.JSON(fiber.Map{\n		"message":   "Image uploaded successfully",\n		"image_id":  image.ID,\n		"file_name": image.FileName,\n	})\n\n}\n\nfunc getImage(c *fiber.Ctx, db *gorm.DB) error {\n	// รับ id ของภาพจาก URL parameter\n	imageID := c.Params("id")\n\n	// สร้างโครงสร้างของ Image สำหรับการค้นหาจากฐานข้อมูล\n	var image models.Image\n	if err := db.First(&image, "employee_id = ?", imageID).Error; err != nil {\n		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{\n			"error": "Image not found",\n		})\n	}\n\n	// ตั้งค่า Content-Type ให้ตรงกับประเภทของไฟล์\n	c.Set("Content-Type", image.FileType)\n\n	// ส่งข้อมูลไฟล์กลับไป\n	return c.Send(image.FileData)\n}\n\n',bcrypt:'package utils\n\nimport(\n	"golang.org/x/crypto/bcrypt"\n)\n\nfunc HashPassword(password string) (string, error) {\n    bytes, err := bcrypt.GenerateFromPassword([]byte(password), 10)\n    return string(bytes), err\n}\n\nfunc CheckPasswordHash(password, hash string) bool {\n    err := bcrypt.CompareHashAndPassword([]byte(hash), []byte(password))\n    return err == nil\n}\n\n',jwt:'package utils\n\nimport (\n	"crypto/rsa"\n	"errors"\n	"github.com/golang-jwt/jwt/v5"\n	"os"\n	"time"\n)\n// sh\n// # create Private Key\n// openssl genpkey -algorithm RSA -out private.key-pkeyopt rsa_keygen_bits:2048\n\n// # create Public Key จาก Private Key\n// openssl rsa -pubout -in private.key -out public.key\n\nvar (\n	privateKey *rsa.PrivateKey\n	publicKey  *rsa.PublicKey\n)\n\n// Initialize keys\nfunc init() {\n	// Load Private Key\n	privateKeyData, err := os.ReadFile("src/utils/private.key")\n	if err != nil {\n		panic(err)\n	}\n\n	privateKey, err = jwt.ParseRSAPrivateKeyFromPEM(privateKeyData)\n	if err != nil {\n		panic(err)\n	}\n\n	// Load Public Key\n	publicKeyData, err := os.ReadFile("src/utils/public.key")\n	if err != nil {\n		panic(err)\n	}\n\n	publicKey, err = jwt.ParseRSAPublicKeyFromPEM(publicKeyData)\n	if err != nil {\n		panic(err)\n	}\n}\n\n// CreateToken generates a new JWT token with the provided user ID, email, and role\nfunc CreateToken(id uint, email string, role string) (string, error) {\n	token := jwt.NewWithClaims(jwt.SigningMethodRS256,\n		jwt.MapClaims{\n			"id":    id,\n			"email": email,\n			"role":  role,\n			"exp":   time.Now().Add(time.Hour * 24).Unix(), // Token expires in 24 hours\n		})\n\n	tokenString, err := token.SignedString(privateKey)\n	if err != nil {\n		return "", err\n	}\n\n	return tokenString, nil\n}\n\n// VerifyToken parses and validates the provided JWT token string\nfunc VerifyToken(tokenString string) (jwt.MapClaims, error) {\n	token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\n		// Ensure the token\'s signing method is RSA and the same as expected\n		if _, ok := token.Method.(*jwt.SigningMethodRSA); !ok {\n			return nil, errors.New("unexpected signing method")\n		}\n		return publicKey, nil\n	})\n\n	if err != nil {\n		return nil, err\n	}\n\n	// Check if the token is valid and contains claims\n	if claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {\n		return claims, nil\n	}\n\n	return nil, errors.New("invalid token")\n}\n'};var T=function(){let[e,n]=(0,o.useState)("main.go"),[r,a]=(0,o.useState)(I.main),s="bg-gradient-to-r from-purple-500/80 to-pink-500/80 rounded-md px-1 ",l=e=>{switch(n(e),e){case"main.go":a(I.main);break;case"db.go":a(I.db);break;case"middleware.go":a(I.md);break;case"models.go":a(I.models);break;case"auth.go":a(I.auth);break;case"emp.go":a(I.emp);break;case"bcrypt.go":a(I.bcrypt);break;case"jwt.go":a(I.jwt)}};return(0,t.jsxs)("main",{className:" flex mt-4 relative rounded-md border p-1 overflow-hidden",children:[(0,t.jsx)("div",{className:"relative flex w-1/5 min-w-44 flex-col items-center justify-center overflow-hidden bg-background",children:(0,t.jsxs)(E,{className:"p-2 overflow-hidden rounded-md bg-background",initialSelectedId:"main",initialExpandedItems:["src"],elements:A,children:[(0,t.jsxs)(_,{element:"src",value:"src",children:[(0,t.jsx)(_,{value:"db",element:"db",children:(0,t.jsx)(x,{value:"db.go",children:(0,t.jsx)("p",{className:"db.go"===e?s:"",onClick:()=>l("db.go"),children:"db.go"})})}),(0,t.jsx)(_,{value:"middleware",element:"middleware",children:(0,t.jsx)(x,{value:"middleware.go",children:(0,t.jsx)("p",{className:"middleware.go"===e?s:"",onClick:()=>l("middleware.go"),children:"middleware.go"})})}),(0,t.jsx)(_,{value:"models",element:"models",children:(0,t.jsx)(x,{value:"models.go",children:(0,t.jsx)("p",{className:"models.go"===e?s:"",onClick:()=>l("models.go"),children:"models.go"})})}),(0,t.jsxs)(_,{value:"routing",element:"routing",children:[(0,t.jsx)(_,{value:"auth",element:"auth",children:(0,t.jsx)(x,{value:"auth.go",children:(0,t.jsx)("p",{className:"auth.go"===e?s:"",onClick:()=>l("auth.go"),children:"auth.go"})})}),(0,t.jsx)(_,{value:"emp",element:"emp",children:(0,t.jsx)(x,{value:"emp.go",children:(0,t.jsx)("p",{className:"emp.go"===e?s:"",onClick:()=>l("emp.go"),children:"emp.go"})})})]}),(0,t.jsxs)(_,{value:"utils",element:"utils",children:[(0,t.jsx)(x,{value:"bcrypt.go",children:(0,t.jsx)("p",{className:"bcrypt.go"===e?s:"",onClick:()=>l("bcrypt.go"),children:"bcrypt.go"})}),(0,t.jsx)(x,{value:"jwt.go",children:(0,t.jsx)("p",{className:"jwt.go"===e?s:"",onClick:()=>l("jwt.go"),children:"jwt.go"})})]})]}),(0,t.jsx)(x,{value:"main",children:(0,t.jsx)("p",{className:"main.go"===e?s:"",onClick:()=>l("main.go"),children:"main.go"})})]})}),(0,t.jsx)("div",{className:"w-4/5",children:(0,t.jsx)(i.o,{className:"max-h-[790px]",size:5,hideScrollBar:!0,children:(0,t.jsx)(C,{code:r,language:"go"})})})]})};let A=[{id:"src",isSelectable:!0,name:"src",children:[{id:"db",isSelectable:!0,name:"db",children:[{id:"db.go",isSelectable:!0,name:"db.go"}]},{id:"middleware",isSelectable:!0,name:"middleware",children:[{id:"middleware.go",isSelectable:!0,name:"middleware.go"}]},{id:"models",isSelectable:!0,name:"models",children:[{id:"models.go",isSelectable:!0,name:"models.go"}]},{id:"routing",isSelectable:!0,name:"routing",children:[{id:"auth",isSelectable:!0,name:"auth",children:[{id:"auth.go",isSelectable:!0,name:"auth.go"}]},{id:"emp",isSelectable:!0,name:"emp",children:[{id:"emp.go",isSelectable:!0,name:"emp.go"}]}]},{id:"utils",isSelectable:!0,name:"utils",children:[{id:"bcrypt.go",isSelectable:!0,name:"bcrypt.go"},{id:"jwt.go",isSelectable:!0,name:"jwt.go"}]}]},{id:"main",isSelectable:!0,name:"main.go"}]}},function(e){e.O(0,[273,118,971,23,744],function(){return e(e.s=44141)}),_N_E=e.O()}]);